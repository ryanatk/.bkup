# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.text.html.basic':
  'notes.md':
    'prefix': 'notes'
    'body': """
      ---
      notes:
      ---

    """

'.source.js':
  'console.log':
    'prefix': 'cl'
    'body': 'console.log(\'* ${1:msg}\');$2'
  'console.log variable':
    'prefix': 'clv'
    'body': 'console.log(\'@ ${1:v}\', `{${typeof ${1:v}}}`, ${1:v});$2'
  'test':
    'prefix': 'test'
    'body': """
      import $ from 'jquery';
      import chai, { expect } from 'chai';
      import chaiJquery from 'chai-jquery';

      import FuncName, {
      } from './file-name';


      describe.only('coolbeans', () => {
        let $fixture;

        beforeEach( () => {
          fixture.set(`
            <div class="${WRAP_CLASS}">
              <div class="${EL_CLASS}"></div>
            </div>
          `);
          $el = $(fixture.el).find(`.{EL_CLASS}`);
        });

        afterEach(() => fixture.cleanup());

        it('should $1', () => {
        });
      });
    """
