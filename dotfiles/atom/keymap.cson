# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# Normal mode keymaps
'atom-text-editor.vim-mode-plus.normal-mode':
  # save
  'enter': 'core:save'
  # add blank line
  'space': 'editor:newline-below'
  'shift-space': 'editor:newline-above'
  # switch tabs
  'ctrl-p': 'pane:show-previous-item'
  'ctrl-n': 'pane:show-next-item'
  # indent
  'tab': 'editor:indent-selected-rows'
  'shift-tab': 'editor:outdent-selected-rows'
  # moving around
  'ctrl-j': 'vim-mode-plus:move-to-next-paragraph'
  'ctrl-k': 'vim-mode-plus:move-to-previous-paragraph'

# Visual mode keymaps
'atom-text-editor.vim-mode-plus.visual-mode':
  # indent
  'tab': 'editor:indent-selected-rows'
  'shift-tab': 'editor:outdent-selected-rows'
  # moving around
  'ctrl-j': 'vim-mode-plus:move-to-next-paragraph'
  'ctrl-k': 'vim-mode-plus:move-to-previous-paragraph'

# Insert mode keymaps
'atom-text-editor.vim-mode-plus.insert-mode':
  # tab for escape to normal mode
  'tab': 'vim-mode-plus:activate-normal-mode'
