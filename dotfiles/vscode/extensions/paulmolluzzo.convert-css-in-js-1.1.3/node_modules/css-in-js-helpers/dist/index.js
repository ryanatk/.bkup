'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = convert;
var getBeginningWhitespace = function getBeginningWhitespace(string) {
  return string.match(/^\s+/) !== null ? string.match(/^\s+/)[0] : '';
};

var isCSS = function isCSS(item) {
  return (item.match(/;/g) || []).length === 1;
};

var isJS = function isJS(item) {
  return (item.match(/,/g) || []).length === 1;
};

var toHyphen = function toHyphen(prop) {
  return prop.replace(/([A-Z])/g, function (char) {
    return '-' + char[0].toLowerCase();
  });
};

var toCamel = function toCamel(prop) {
  return prop.replace(/-(\w|$)/g, function (dash, next) {
    return next.toUpperCase();
  });
};

var toJS = function toJS(item) {
  var _item$split = item.split(':'),
      _item$split2 = _slicedToArray(_item$split, 2),
      prop = _item$split2[0],
      val = _item$split2[1];

  return '' + getBeginningWhitespace(prop) + toCamel(prop.trim()) + ': \'' + val.trim().replace(';', '') + '\',';
};

var toCSS = function toCSS(item) {
  var _item$split3 = item.split(':'),
      _item$split4 = _slicedToArray(_item$split3, 2),
      prop = _item$split4[0],
      val = _item$split4[1];

  return '' + getBeginningWhitespace(prop) + toHyphen(prop.trim()) + ': ' + val.trim().replace(/'|,/g, '') + ';';
};

function convert(s) {
  var lines = s.split('\n');
  return lines.map(function (item) {
    return isCSS(item) ? toJS(item) : isJS(item) ? toCSS(item) : item;
  }).join('\n');
}